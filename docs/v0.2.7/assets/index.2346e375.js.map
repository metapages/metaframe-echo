{"version":3,"file":"index.2346e375.js","sources":["../../../vite/modulepreload-polyfill","../../../preact/jsx-runtime","../../../src/routes/echo.tsx","../../../src/App.tsx","../../../src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import * as jsxRuntime from \"/repo/node_modules/preact/jsx-runtime/dist/jsxRuntime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import { FunctionalComponent } from \"preact\";\nimport { useEffect, useState } from \"preact/hooks\";\nimport {\n  useMetaframe,\n  useHashParamBoolean,\n} from \"@metapages/metaframe-hook\";\nimport { MetaframeInputMap } from \"@metapages/metapage\";\n\nexport const Route: FunctionalComponent = () => {\n  // This is currently the most performant way to get metaframe\n  // inputs and cleanup properly\n  const metaframeObject = useMetaframe();\n  const [inputs, setInputs] = useState<MetaframeInputMap | undefined>();\n  const [ debug ] = useHashParamBoolean(\"debug\");\n\n  // listen to inputs and cleanup up listener\n  useEffect(() => {\n    if (!metaframeObject?.metaframe) {\n      return;\n    }\n    const metaframe = metaframeObject.metaframe;\n    const onInputs = (newinputs: MetaframeInputMap): void => {\n      if (debug) {\n        console.log(`${window.location.host}${window.location.pathname} new inputs: ${JSON.stringify(newinputs).substring(0, 200)}`);\n      }\n      setInputs(newinputs);\n      metaframe.setOutputs(newinputs)\n    };\n    const disposer = metaframe.onInputs(onInputs);\n\n    return () => {\n      // If the metaframe is cleaned up, also remove the inputs listener\n      disposer();\n    };\n  }, [metaframeObject.metaframe, setInputs]);\n\n  return (\n    <div>\n      {inputs ? JSON.stringify(inputs).substring(0, 50) : \"No inputs yet\"}\n    </div>\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { Route as Echo } from \"./routes/echo\";\n\nexport const App: FunctionalComponent = () => {\n  return <Echo />;\n};\n","import { render } from \"preact\";\nimport { WithMetaframe } from \"@metapages/metaframe-hook\";\nimport { App } from \"./App\";\n\nrender(\n    <WithMetaframe>\n      <App />\n    </WithMetaframe>,\n  document.getElementById(\"root\")!\n);\n"],"names":["jsxRuntime.jsx","Route","metaframeObject","useMetaframe","inputs","setInputs","useState","debug","useHashParamBoolean","metaframe","onInputs","newinputs","log","window","location","host","pathname","JSON","stringify","substring","setOutputs","disposer","_jsx","App","Echo","render","WithMetaframe","document","getElementById"],"mappings":"mFAAA,KAAM,GAAI,UAAoB,CAC1B,KAAM,GAAU,SAAS,cAAc,QAAQ,QAC/C,GAAI,GAAW,EAAQ,UAAY,EAAQ,SAAS,iBAChD,OAEJ,SAAW,KAAQ,UAAS,iBAAiB,6BACzC,EAAe,GAEnB,GAAI,kBAAiB,AAAC,GAAc,CAChC,SAAW,KAAY,GACnB,GAAI,EAAS,OAAS,YAGtB,SAAW,KAAQ,GAAS,WACxB,AAAI,EAAK,UAAY,QAAU,EAAK,MAAQ,iBACxC,EAAe,KAG5B,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,KACjD,WAAsB,EAAQ,CAC1B,KAAM,GAAY,GAClB,MAAI,GAAO,WACP,GAAU,UAAY,EAAO,WAC7B,EAAO,gBACP,GAAU,eAAiB,EAAO,gBACtC,AAAI,EAAO,cAAgB,kBACvB,EAAU,YAAc,UACvB,AAAI,EAAO,cAAgB,YAC5B,EAAU,YAAc,OAExB,EAAU,YAAc,cACrB,EAEX,WAAwB,EAAM,CAC1B,GAAI,EAAK,GAEL,OACJ,EAAK,GAAK,GAEV,KAAM,GAAY,EAAa,GAC/B,MAAM,EAAK,KAAM,KAEvB,AAAoB,ICzCf,KAAM,GAAMA,ECONC,EAA6B,IAAM,MAGxCC,GAAkBC,IAClB,CAACC,EAAQC,GAAaC,IACtB,CAAEC,GAAUC,EAAoB,kBAG5B,IAAM,IACV,CAACN,GAAiBO,sBAGhBA,GAAYP,EAAgBO,UAC5BC,EAAW,AAACC,GAAuC,CACnDJ,WACMK,IAAK,GAAEC,OAAOC,SAASC,OAAOF,OAAOC,SAASE,wBAAwBC,KAAKC,UAAUP,GAAWQ,UAAU,EAAG,UAE7GR,KACAS,WAAWT,IAEjBU,EAAWZ,EAAUC,SAASA,SAE7B,IAAM,OAIZ,CAACR,EAAgBO,UAAWJ,IAG7BiB,kBACGlB,EAASa,KAAKC,UAAUd,GAAQe,UAAU,EAAG,IAAM,mBCnC7CI,EAA2B,IAC/BD,EAACE,MCAVC,EACIH,EAACI,YACCJ,EAAC,QAELK,SAASC,eAAe"}